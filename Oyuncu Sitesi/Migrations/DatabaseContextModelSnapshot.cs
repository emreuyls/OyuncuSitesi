// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Web.DataAccess.EntityFramework;

namespace Oyuncu_Sitesi.Migrations
{
    [DbContext(typeof(DatabaseContext))]
    partial class DatabaseContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "3.1.7")
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("Web.Entity.Advert", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("AdDate")
                        .HasColumnType("datetime2");

                    b.Property<bool>("AdType")
                        .HasColumnType("bit");

                    b.Property<string>("Content")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("GamesID")
                        .HasColumnType("int");

                    b.Property<string>("MinAge")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Nick")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Rank")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Role")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserID")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("ID");

                    b.HasIndex("GamesID");

                    b.ToTable("Adverts");
                });

            modelBuilder.Entity("Web.Entity.AdvertRank", b =>
                {
                    b.Property<int>("AdvertID")
                        .HasColumnType("int");

                    b.Property<int>("RankID")
                        .HasColumnType("int");

                    b.HasKey("AdvertID", "RankID");

                    b.HasIndex("RankID");

                    b.ToTable("AdvertRank");
                });

            modelBuilder.Entity("Web.Entity.AdvertRole", b =>
                {
                    b.Property<int>("AdvertID")
                        .HasColumnType("int");

                    b.Property<int>("RolesID")
                        .HasColumnType("int");

                    b.HasKey("AdvertID", "RolesID");

                    b.HasIndex("RolesID");

                    b.ToTable("AdvertRole");
                });

            modelBuilder.Entity("Web.Entity.GameRank", b =>
                {
                    b.Property<int>("GamesID")
                        .HasColumnType("int");

                    b.Property<int>("RankID")
                        .HasColumnType("int");

                    b.HasKey("GamesID", "RankID");

                    b.HasIndex("RankID");

                    b.ToTable("GameRank");
                });

            modelBuilder.Entity("Web.Entity.GameRole", b =>
                {
                    b.Property<int>("GamesID")
                        .HasColumnType("int");

                    b.Property<int>("RolesID")
                        .HasColumnType("int");

                    b.HasKey("GamesID", "RolesID");

                    b.HasIndex("RolesID");

                    b.ToTable("GameRole");
                });

            modelBuilder.Entity("Web.Entity.GameTags", b =>
                {
                    b.Property<int>("GamesID")
                        .HasColumnType("int");

                    b.Property<int>("TagsID")
                        .HasColumnType("int");

                    b.HasKey("GamesID", "TagsID");

                    b.HasIndex("TagsID");

                    b.ToTable("GameTags");
                });

            modelBuilder.Entity("Web.Entity.Games", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Img")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("ID");

                    b.ToTable("Games");
                });

            modelBuilder.Entity("Web.Entity.Rank", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Ranks")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("ID");

                    b.ToTable("Rank");
                });

            modelBuilder.Entity("Web.Entity.Roles", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Role")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("ID");

                    b.ToTable("Roles");
                });

            modelBuilder.Entity("Web.Entity.Tags", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Tag")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("ID");

                    b.ToTable("Tags");
                });

            modelBuilder.Entity("Web.Entity.Advert", b =>
                {
                    b.HasOne("Web.Entity.Games", "Games")
                        .WithMany("Adverts")
                        .HasForeignKey("GamesID");
                });

            modelBuilder.Entity("Web.Entity.AdvertRank", b =>
                {
                    b.HasOne("Web.Entity.Advert", "Advert")
                        .WithMany("AdvertRanks")
                        .HasForeignKey("AdvertID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Web.Entity.Rank", "Rank")
                        .WithMany("AdvertRanks")
                        .HasForeignKey("RankID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Web.Entity.AdvertRole", b =>
                {
                    b.HasOne("Web.Entity.Advert", "Advert")
                        .WithMany("AdvertRoles")
                        .HasForeignKey("AdvertID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Web.Entity.Roles", "Roles")
                        .WithMany("AdvertRoles")
                        .HasForeignKey("RolesID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Web.Entity.GameRank", b =>
                {
                    b.HasOne("Web.Entity.Games", "Games")
                        .WithMany("GameRanks")
                        .HasForeignKey("GamesID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Web.Entity.Rank", "Rank")
                        .WithMany("GameRanks")
                        .HasForeignKey("RankID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Web.Entity.GameRole", b =>
                {
                    b.HasOne("Web.Entity.Games", "Games")
                        .WithMany("GameRoles")
                        .HasForeignKey("GamesID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Web.Entity.Roles", "Roles")
                        .WithMany("GameRoles")
                        .HasForeignKey("RolesID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Web.Entity.GameTags", b =>
                {
                    b.HasOne("Web.Entity.Games", "Games")
                        .WithMany("GameTags")
                        .HasForeignKey("GamesID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Web.Entity.Tags", "Tags")
                        .WithMany("GameTags")
                        .HasForeignKey("TagsID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });
#pragma warning restore 612, 618
        }
    }
}
